var tables_list = data["tables"]
var cns = ["A implies C", "A || C"]

var tables = map(function(obj){
  return Categorical({"vs": obj["vs"], "ps": obj["ps"]})
}, tables_list)

var logL_dep = function(par){
  var ll_tables = map(function(Table){
    var ac = Math.exp(Table.score("bg"))
    var anc = Math.exp(Table.score("b"))
    var pa = ac + anc
    var c_given_a = ac/pa
    var c_given_na = anc/(1-pa)

    var ll = Beta({a: par.alpha, b: par.beta}).score(c_given_a) +
             Beta({a: par.beta, b: par.alpha}).score(c_given_na)
    return ll
  }, tables)
  return sum(ll_tables)
}

var logL_ind = function(par){
  var ll_tables = map(function(Table){
    var ac = Math.exp(Table.score("bg"))
    var pa = ac + Math.exp(Table.score("b"))
    var pc = ac + Math.exp(Table.score("g"))

    var ll = Gaussian({mu: pa*pc, sigma: par.sigma}).score(ac)
    return ll
  }, tables)
  return sum(ll_tables)
}

var dataAnalysis = function() {
  // priors over parameters
  var pa = beta({a:1, b:1})
  var p_cn = beta({a:1, b:1})

  var par_dep = {alpha:  uniform({a:0, b:10}), beta:  uniform({a:0, b:10}), pa}
  var par_ind = {sigma: uniform({a:0, b:1}), pc: beta({a:1, b:1}), pa}

  // samples
  var cn = categorical({vs: cns, ps: [p_cn, 1-p_cn]})
  var logl = cn == "A implies C" ? logL_dep(par_dep) : logL_ind(par_ind)
  factor(logl)

  return({alpha: par_dep.alpha, beta: par_dep.beta, sigma: par_ind.sigma,
          p_cn})
}

var numSamples = 10000
var inferOpts = {
  model: dataAnalysis,
  method: "MCMC",
  samples: numSamples,
  burn: numSamples/2
};

var posterior = Infer(inferOpts);
posterior
